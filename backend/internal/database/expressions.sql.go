// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: expressions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createExpression = `-- name: CreateExpression :one
INSERT INTO expressions (id, created_at, updated_at, data, parse_data, status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, data, status, parse_data, result, is_ready
`

type CreateExpressionParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Data      string
	ParseData string
	Status    ExpressionStatus
}

func (q *Queries) CreateExpression(ctx context.Context, arg CreateExpressionParams) (Expression, error) {
	row := q.db.QueryRowContext(ctx, createExpression,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Data,
		arg.ParseData,
		arg.Status,
	)
	var i Expression
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
		&i.Status,
		&i.ParseData,
		&i.Result,
		&i.IsReady,
	)
	return i, err
}

const getExpressionByID = `-- name: GetExpressionByID :one
SELECT id, created_at, updated_at, data, status, parse_data, result, is_ready FROM expressions
WHERE id = $1
`

func (q *Queries) GetExpressionByID(ctx context.Context, id uuid.UUID) (Expression, error) {
	row := q.db.QueryRowContext(ctx, getExpressionByID, id)
	var i Expression
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
		&i.Status,
		&i.ParseData,
		&i.Result,
		&i.IsReady,
	)
	return i, err
}

const getExpressions = `-- name: GetExpressions :many
SELECT id, created_at, updated_at, data, status, parse_data, result, is_ready FROM expressions
`

func (q *Queries) GetExpressions(ctx context.Context) ([]Expression, error) {
	rows, err := q.db.QueryContext(ctx, getExpressions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expression
	for rows.Next() {
		var i Expression
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
			&i.Status,
			&i.ParseData,
			&i.Result,
			&i.IsReady,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const makeExpressionReady = `-- name: MakeExpressionReady :one
UPDATE expressions
SET parse_data = $1, result = $2, updated_at = $3, is_ready = True, status = 'result'
WHERE id = $4
RETURNING id, created_at, updated_at, data, status, parse_data, result, is_ready
`

type MakeExpressionReadyParams struct {
	ParseData string
	Result    int32
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) MakeExpressionReady(ctx context.Context, arg MakeExpressionReadyParams) (Expression, error) {
	row := q.db.QueryRowContext(ctx, makeExpressionReady,
		arg.ParseData,
		arg.Result,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Expression
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
		&i.Status,
		&i.ParseData,
		&i.Result,
		&i.IsReady,
	)
	return i, err
}

const updateExpressionData = `-- name: UpdateExpressionData :one
UPDATE expressions
SET data = $1
WHERE id = $2
RETURNING id, created_at, updated_at, data, status, parse_data, result, is_ready
`

type UpdateExpressionDataParams struct {
	Data string
	ID   uuid.UUID
}

func (q *Queries) UpdateExpressionData(ctx context.Context, arg UpdateExpressionDataParams) (Expression, error) {
	row := q.db.QueryRowContext(ctx, updateExpressionData, arg.Data, arg.ID)
	var i Expression
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
		&i.Status,
		&i.ParseData,
		&i.Result,
		&i.IsReady,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: operations.sql

package postgres

import (
	"context"
)

const getOperationTimeByType = `-- name: GetOperationTimeByType :one
SELECT execution_time
FROM operations
WHERE operation_type = $1 AND user_id = $2
`

type GetOperationTimeByTypeParams struct {
	OperationType string
	UserID        int32
}

func (q *Queries) GetOperationTimeByType(ctx context.Context, arg GetOperationTimeByTypeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getOperationTimeByType, arg.OperationType, arg.UserID)
	var execution_time int32
	err := row.Scan(&execution_time)
	return execution_time, err
}

const getOperations = `-- name: GetOperations :many
SELECT
    operation_id, operation_type, execution_time, user_id
FROM operations
WHERE user_id = $1
ORDER BY operation_type DESC
`

func (q *Queries) GetOperations(ctx context.Context, userID int32) ([]Operation, error) {
	rows, err := q.db.QueryContext(ctx, getOperations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Operation
	for rows.Next() {
		var i Operation
		if err := rows.Scan(
			&i.OperationID,
			&i.OperationType,
			&i.ExecutionTime,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newOperationsForUser = `-- name: NewOperationsForUser :exec
INSERT INTO operations (operation_type, user_id) VALUES 
('+', $1),
('-', $1),
('*', $1),
('/', $1)
`

func (q *Queries) NewOperationsForUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, newOperationsForUser, userID)
	return err
}

const updateOperationTime = `-- name: UpdateOperationTime :one
UPDATE operations
SET execution_time = $1
WHERE operation_type = $2 AND user_id = $3
RETURNING operation_id, operation_type, execution_time, user_id
`

type UpdateOperationTimeParams struct {
	ExecutionTime int32
	OperationType string
	UserID        int32
}

func (q *Queries) UpdateOperationTime(ctx context.Context, arg UpdateOperationTimeParams) (Operation, error) {
	row := q.db.QueryRowContext(ctx, updateOperationTime, arg.ExecutionTime, arg.OperationType, arg.UserID)
	var i Operation
	err := row.Scan(
		&i.OperationID,
		&i.OperationType,
		&i.ExecutionTime,
		&i.UserID,
	)
	return i, err
}
